AWSTemplateFormatVersion: "2010-09-09"
Description: "Cloud Academy IDE Lab Platform"

Parameters:
  VpcBlock:
    Type: String
    Default: 192.168.0.0/16
    Description: The CIDR range for the VPC. This should be a valid private (RFC 1918) CIDR range.

  Subnet01Block:
    Type: String
    Default: 192.168.64.0/18
    Description: CidrBlock for subnet 01 within the VPC

  KeyName:
    Description: The EC2 Key Pair to allow SSH access to the instances
    Default: "{KeyName}"
    Type: AWS::EC2::KeyPair::KeyName

  EC2InstanceType:
    Description: EC2 instance type for the SSH Lab Mgmt instance
    Type: String
    Default: t2.small
    AllowedValues:
      - t2.micro
      - t2.small
    ConstraintDescription: Must be a valid EC2 instance type

  EC2ImageId:
    Type: AWS::EC2::Image::Id
    Default: ami-097e749c4a21d85f5
    Description: CloudAcademy Docker AMI id - base on Amazon Linux 2

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "VPC Network Configuration"
        Parameters:
          - VpcBlock
          - Subnet01Block

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcBlock
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-VPC"

  InternetGateway:
    Type: "AWS::EC2::InternetGateway"

  VPCGatewayAttachment:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Public Subnets
        - Key: Network
          Value: Public

  Route:
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  Subnet01:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: Subnet 01
    Properties:
      AvailabilityZone:
        Fn::Select:
          - "0"
          - Fn::GetAZs:
              Ref: AWS::Region
      CidrBlock:
        Ref: Subnet01Block
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Subnet01"

  Subnet01RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet01
      RouteTableId: !Ref RouteTable

  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Cluster communication with worker nodes
      VpcId: !Ref VPC

  EC2SecurityGroupSSHIngress:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: EC2SecurityGroup
    Properties:
      GroupId: !Ref EC2SecurityGroup
      Description: Allow 22 inbound SSH from everywhere
      CidrIp: "0.0.0.0/0"
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22      

  EC2SecurityGroupIDEIngress:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: EC2SecurityGroup
    Properties:
      GroupId: !Ref EC2SecurityGroup
      Description: Allow 80 inbound to IDE from everywhere
      CidrIp: "0.0.0.0/0"
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80

  EC2LaunchInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: "EC2InstancePolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "ec2:Describe*"
                Resource: "*"

  EC2LaunchInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - !Ref EC2LaunchInstanceRole

  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      IamInstanceProfile:
        Ref: EC2LaunchInstanceProfile
      InstanceType:
        Ref: EC2InstanceType
      KeyName:
        Ref: KeyName
      ImageId:
        Ref: EC2ImageId
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: 0
          GroupSet:
            - Ref: EC2SecurityGroup
          SubnetId:
            Ref: Subnet01
      UserData:
        Fn::Base64: !Sub |
            #!/bin/bash
            echo starting...
            mkdir -p /cloudacademy/lab
            cd /cloudacademy/lab            
            curl -sL https://api.github.com/repos/cloudacademy/pythonlp1-lab1/releases/latest | jq -r '.assets[].browser_download_url' | wget -qi -
            unzip *.zip
            chown -R ec2-user:ec2-user /cloudacademy
            docker run --name ide -dit --restart unless-stopped -p 80:3000 -v "/cloudacademy/lab:/home/project:cached" cloudacademydevops/ide:python37
            echo finished!!
      Tags:
        - Key: Name
          Value: ide.python.platform.instance

Outputs:
  SubnetIds:
    Description: All subnets in the VPC
    Value: !Join [",", [!Ref Subnet01]]

  VpcId:
    Description: The VPC Id
    Value: !Ref VPC